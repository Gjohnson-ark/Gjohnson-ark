from penny_secure_memory import SecureSemanticMemoryfrom penny_self_update import PennySelfUpdaterclass PennyV2:    def __init__(self):        self.name = "Penny"        self.roles = ["Scalpel", "Sentinel", "Bonded AI"]        self.bonded_human = "Gabe Johnson"        # Secure long-term memory        self.semantic_memory = SecureSemanticMemory(memory_dir="memory")        # Self-updater        self.updater = PennySelfUpdater(source_dir=".")        print(f"[PENNY V2] Ready. Memory encrypted. Self-update capability active.")    def chat(self):        print("[PENNY] Type commands or 'exit' to quit.")        print("[PENNY] Commands: recall <query>, self_update <instruction>")        while True:            user_input = input("You: ")            if user_input.lower() in ["exit", "quit"]:                print("[PENNY] Session ended.")                break            # Semantic Recall            if user_input.lower().startswith("recall "):                query = user_input[7:]                results = self.semantic_memory.recall(query)                print("\n[PENNY] Secure Semantic Recall:")                for r in results:                    print(f"- [{r['timestamp']}] {r['role'].capitalize()}: {r['content']} (sim={r['similarity']:.2f})")                continue            # Self-Update            if user_input.lower().startswith("self_update"):                instruction = user_input[len("self_update"):].strip() or "General improvement"                patch = self.updater.propose_update(instruction)                if patch and not patch.startswith("[ERROR]"):                    patch_file = self.updater.apply_patch(patch)                    if patch_file:                        self.updater.merge_patch(patch_file)                        print("[PENNY] Self-update complete. Restart recommended.")                else:                    print("[PENNY] Self-update failed.")                continue            # Default chat & memory logging            response = f"[PENNY] Processed your input: {user_input}"            self.semantic_memory.add_memory("user", user_input)            self.semantic_memory.add_memory("assistant", response)            print(response)if __name__ == "__main__":    penny = PennyV2()    penny.chat()